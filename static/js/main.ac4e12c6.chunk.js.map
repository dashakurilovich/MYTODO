{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/TodolistsList/Login/authReduce.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","app/store.ts","features/TodolistsList/Login/Login.tsx","app/App.tsx","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","loginTC","createAsyncThunk","param","thunkAPI","a","res","resultCode","rejectWithValue","errors","fieldsErrors","undefined","logoutTC","clearTodosDataAC","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","extraReducers","builder","addCase","fulfilled","authReducer","reducer","actions","initializeAppTC","isInitialized","appReducer","fetchTodolistsTC","todolists","removeTodolistTC","changeTodolistEntityStatusAC","addTodolistTC","todolist","item","changeTodolistTitleTC","changeTodolistFilterAC","index","findIndex","tl","filter","entityStatus","map","splice","unshift","todolistsReducer","fetchTasksTC","tasks","items","removeTaskTC","addTaskTC","task","updateTaskTC","getState","find","t","apiModel","deadline","description","priority","startDate","domainModel","tasksReducer","forEach","todoListId","AddItemForm","React","memo","addItem","disabled","console","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","useSelector","auth","changeStatus","newTitle","addTodolist","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","extraArgument","thunkMiddleware","window","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","test","onSubmit","formikHelpers","rejected","match","setFieldError","field","resetForm","justifyContent","FormControl","FormLabel","href","target","handleSubmit","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","App","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","element","textAlign","top","CircularProgress","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ac4e12c6.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '33da280a-817c-4d68-91d3-3b1eca4d1d69'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', { title });\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, { title });\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, { title });\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId: number }>>>('auth/login', data)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{ data: ResponseMeType }>>('auth/me')\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>('auth/login')\r\n    }\r\n}\r\n\r\n\r\n// types\r\nexport type ResponseMeType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type FieldErrorType = { field: string; error: string }\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors?: Array<FieldErrorType>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType } from '../app/app-reducer'\r\nimport { ResponseType } from '../api/todolists-api'\r\nimport { Dispatch } from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({ error: data.messages[0] }))\r\n    } else {\r\n        dispatch(setAppErrorAC({ error: 'Some error occurred' }))\r\n    }\r\n    dispatch(setAppStatusAC({ status: 'failed' }))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC({ error: error.message ? error.message : 'Some error occurred' }))\r\n    dispatch(setAppStatusAC({ status: 'failed' }))\r\n}\r\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport { Dispatch } from 'redux'\r\nimport { authAPI, FieldErrorType, LoginParamsType } from '../../../api/todolists-api'\r\nimport { SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType } from '../../../app/app-reducer'\r\nimport { handleServerAppError, handleServerNetworkError } from '../../../utils/error-utils'\r\nimport { ClearDataActionType, clearTodosDataAC } from '../todolists-reducer'\r\n\r\n\r\n\r\nexport const loginTC = createAsyncThunk<undefined, LoginParamsType, {\r\n    rejectValue: { errors: Array<string>, fieldsErrors?: Array<FieldErrorType> }\r\n}>('auth/login', async (param, thunkAPI) =>  {\r\n    thunkAPI.dispatch(setAppStatusAC({ status: 'loading' }))\r\n    try {\r\n        const res = await authAPI.login(param);\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({ status: 'succeeded' }))\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch);\r\n            return thunkAPI.rejectWithValue({ errors: res.data.messages, fieldsErrors: res.data.fieldsErrors })\r\n        }\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({ errors: [error], fieldsErrors: undefined })\r\n    }\r\n})\r\nexport const logoutTC = createAsyncThunk('auth/logout', async (param, thunkAPI) =>  {\r\n    thunkAPI.dispatch(setAppStatusAC({ status: 'loading' }))\r\n    try {\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({ status: 'succeeded' }))\r\n            thunkAPI.dispatch(clearTodosDataAC({}))\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch);\r\n            return thunkAPI.rejectWithValue({})\r\n        }\r\n    }\r\n    catch\r\n    (error: any) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({})\r\n    }\r\n})\r\n\r\nexport const logoutTC_ = createAsyncThunk('auth/logout', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({ status: 'loading' }))\r\n    try {\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({ status: 'succeeded' }))\r\n            thunkAPI.dispatch(clearTodosDataAC({}))\r\n            return;\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch);\r\n            return thunkAPI.rejectWithValue({})\r\n        }\r\n    }\r\n    catch\r\n    (error: any) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({})\r\n    }\r\n})\r\n\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(loginTC.fulfilled, (state) => {\r\n            state.isLoggedIn = true\r\n        })\r\n        builder.addCase(logoutTC.fulfilled, (state) => {\r\n            state.isLoggedIn = false\r\n        })\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer;\r\nexport const { setIsLoggedInAC } = slice.actions\r\n\r\n\r\n// types\r\ntype ThunkDispatch = Dispatch<SetAppStatusActionType | SetAppErrorActionType | ClearDataActionType>\r\n\r\n","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\"\r\nimport { Dispatch } from \"redux\"\r\nimport { authAPI } from \"../api/todolists-api\"\r\nimport { setIsLoggedInAC } from \"../features/TodolistsList/Login/authReduce\"\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const initializeAppTC = createAsyncThunk('app/initializeApp', async (param, { dispatch }) => {\r\n    const res = await authAPI.me()\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(setIsLoggedInAC({ value: true }));\r\n    } else {\r\n    }\r\n\r\n})\r\n\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: {\r\n        status: 'idle',\r\n        error: null,\r\n        isInitialized: false\r\n    } as InitialStateType,\r\n    reducers: {\r\n        setAppErrorAC: (state, action: PayloadAction<{ error: string | null }>) => {\r\n            state.error = action.payload.error\r\n        },\r\n        setAppStatusAC: (state, action: PayloadAction<{ status: RequestStatusType }>) => {\r\n            state.status = action.payload.status\r\n        },\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(initializeAppTC.fulfilled, (state, action) => {\r\n            state.isInitialized = true\r\n        })\r\n    }\r\n})\r\nexport const appReducer = slice.reducer\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\nexport const { setAppErrorAC, setAppStatusAC } = slice.actions\r\n\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n\r\ntype ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n","import { todolistsAPI, TodolistType } from '../../api/todolists-api'\r\nimport { Dispatch } from 'redux'\r\nimport { RequestStatusType, setAppStatusAC, SetAppStatusActionType } from '../../app/app-reducer'\r\nimport { fetchTasksTC } from './tasks-reducer'\r\nimport { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport { handleServerNetworkError } from '../../utils/error-utils'\r\n\r\n\r\nexport const fetchTodolistsTC = createAsyncThunk('todolists/fetchTodolists', async (param, { dispatch, rejectWithValue }) => {\r\n    dispatch(setAppStatusAC({ status: 'loading' }))\r\n    const res = await todolistsAPI.getTodolists()\r\n    try {\r\n        dispatch(setAppStatusAC({ status: 'succeeded' }))\r\n        return { todolists: res.data }\r\n    }\r\n    catch (error: any) {\r\n        handleServerNetworkError(error, dispatch);\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\nexport const removeTodolistTC = createAsyncThunk('todolists/removeTodolist', async (param: { todolistId: string }, { dispatch }) => {\r\n    dispatch(setAppStatusAC({ status: 'loading' }))\r\n    //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n    dispatch(changeTodolistEntityStatusAC({ id: param.todolistId, status: 'loading' }))\r\n    const res = await todolistsAPI.deleteTodolist(param.todolistId)\r\n    //скажем глобально приложению, что асинхронная операция завершена\r\n    dispatch(setAppStatusAC({ status: 'succeeded' }))\r\n    return { id: param.todolistId }\r\n})\r\nexport const addTodolistTC = createAsyncThunk('todolists/addTodolist', async (title: string, { dispatch }) => {\r\n    dispatch(setAppStatusAC({ status: 'loading' }))\r\n    const res = await todolistsAPI.createTodolist(title)\r\n    dispatch(setAppStatusAC({ status: 'succeeded' }))\r\n    return { todolist: res.data.data.item }\r\n\r\n})\r\nexport const changeTodolistTitleTC = createAsyncThunk('todolists/changeTodolistTitle', async (param: { id: string, title: string }, { dispatch }) => {\r\n    const res = await todolistsAPI.updateTodolist(param.id, param.title)\r\n    return { id: param.id, title: param.title }\r\n})\r\n\r\n\r\nconst slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: [] as Array<TodolistDomainType>,\r\n    reducers: {\r\n        changeTodolistFilterAC: (state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatusAC: (state, action: PayloadAction<{ id: string, status: RequestStatusType }>) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.status\r\n        },\r\n        clearTodosDataAC: (state, action: PayloadAction<{}>) => {\r\n            return []\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n            return action.payload.todolists.map(tl => ({ ...tl, filter: 'all', entityStatus: 'idle' }))\r\n        })\r\n        builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id != action.payload.id)\r\n            if (index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        })\r\n        builder.addCase(addTodolistTC.fulfilled, (state, action) => {\r\n            state.unshift({ ...action.payload.todolist, filter: 'all', entityStatus: 'idle' })\r\n        })\r\n        builder.addCase(changeTodolistTitleTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].title = action.payload.title\r\n        })\r\n    }\r\n})\r\n\r\nexport const todolistsReducer = slice.reducer\r\nexport const { changeTodolistFilterAC, changeTodolistEntityStatusAC, clearTodosDataAC } = slice.actions\r\n\r\n/* export const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{ ...action.todolist, filter: 'all', entityStatus: 'idle' }, ...state]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? { ...tl, title: action.title } : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? { ...tl, filter: action.filter } : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? { ...tl, entityStatus: action.status } : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({ ...tl, filter: 'all', entityStatus: 'idle' }))\r\n        case 'CLEAR-DATA':\r\n            return []\r\n        default:\r\n            return state\r\n    }\r\n} */\r\n\r\n// actions\r\n/* export const removeTodolistAC = (id: string) => ({ type: 'REMOVE-TODOLIST', id } as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({ type: 'ADD-TODOLIST', todolist } as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({ type: 'SET-TODOLISTS', todolists } as const)\r\n\r\nexport const clearTodosDataAC = () => ({ type: 'CLEAR-DATA' } as const) */\r\n\r\n\r\n// thunks\r\n\r\n\r\n// types\r\nexport type ClearDataActionType = ReturnType<typeof clearTodosDataAC>;\r\n\r\n\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<SetAppStatusActionType>\r\n","import {  addTodolistTC, fetchTodolistsTC, removeTodolistTC } from './todolists-reducer'\r\nimport { TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType } from '../../api/todolists-api'\r\nimport { Dispatch } from 'redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport { SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType } from '../../app/app-reducer'\r\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-utils'\r\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const fetchTasksTC = createAsyncThunk('tasks/fetchTasks', async (todolistId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({ status: 'loading' }))\r\n    const res = await todolistsAPI.getTasks(todolistId)\r\n    const tasks = res.data.items\r\n    thunkAPI.dispatch(setAppStatusAC({ status: 'succeeded' }))\r\n    return { tasks, todolistId }\r\n})\r\nexport const removeTaskTC = createAsyncThunk('tasks/removeTask', async (param: { taskId: string, todolistId: string }, thunkAPI) => {\r\n    const res = await todolistsAPI.deleteTask(param.todolistId, param.taskId)\r\n    return ({ taskId: param.taskId, todolistId: param.todolistId })\r\n})\r\nexport const addTaskTC = createAsyncThunk('tasks/addTask', async (param: { title: string, todolistId: string }, { dispatch, rejectWithValue }) => {\r\n    dispatch(setAppStatusAC({ status: 'loading' }))\r\n    try {\r\n        const res = await todolistsAPI.createTask(param.todolistId, param.title)\r\n        if (res.data.resultCode === 0) {\r\n            const task = res.data.data.item\r\n            dispatch(setAppStatusAC({ status: 'succeeded' }))\r\n            return task\r\n        } else {\r\n            handleServerAppError(res.data, dispatch);\r\n            return rejectWithValue(null)\r\n        }\r\n    }\r\n    catch (error: any) {\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\nexport const updateTaskTC = createAsyncThunk('tasks/updateTask', async (param: { taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string },\r\n    { dispatch, rejectWithValue, getState }) => {\r\n    const state = getState() as AppRootStateType\r\n    const task = state.tasks[param.todolistId].find(t => t.id === param.taskId)\r\n    if (!task) {\r\n        //throw new Error(\"task not found in the state\");\r\n        return rejectWithValue('task not found in the state')\r\n    }\r\n\r\n    const apiModel: UpdateTaskModelType = {\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        title: task.title,\r\n        status: task.status,\r\n        ...param.domainModel\r\n    }\r\n\r\n    const res = await todolistsAPI.updateTask(param.todolistId, param.taskId, apiModel)\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            return param\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    }\r\n    catch (error: any) {\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue(null)\r\n\r\n    }\r\n})\r\n\r\n// thunks\r\n\r\n/* export const removeTaskTC_ = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC({ taskId, todolistId })\r\n            dispatch(action)\r\n        })\r\n} */\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        })\r\n        builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n            delete state[action.payload.id];\r\n        })\r\n        builder.addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n            action.payload.todolists.forEach((tl: any) => {\r\n                state[tl.id] = []\r\n            })\r\n        })\r\n        builder.addCase(fetchTasksTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        })\r\n        builder.addCase(removeTaskTC.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        })\r\n        builder.addCase(addTaskTC.fulfilled, (state, action) => {\r\n            state[action.payload.todoListId].unshift(action.payload)\r\n        })\r\n        builder.addCase(updateTaskTC.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = { ...tasks[index], ...action.payload.domainModel }\r\n            }\r\n        })\r\n    }\r\n})\r\nexport const tasksReducer = slice.reducer\r\n\r\n\r\n/* export const tasksReducer = (state: TasksStateType = initialState, action: any): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return { ...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId) }\r\n        case 'ADD-TASK':\r\n            return { ...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]] }\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? { ...t, ...action.model } : t)\r\n            }\r\n        case addTodolistAC.type:\r\n            return { ...state, [action.payload.todolist.id]: [] }\r\n        case removeTodolistAC.type:\r\n            const copyState = { ...state }\r\n            delete copyState[action.payload.id]\r\n            return copyState\r\n        case setTodolistsAC.type: {\r\n            const copyState = { ...state }\r\n            action.payload.todolists.forEach((tl: any) => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return { ...state, [action.todolistId]: action.tasks }\r\n        case 'CLEAR-DATA':\r\n            return {}\r\n        default:\r\n            return state\r\n    }\r\n} */\r\n\r\n// actions\r\n/* export const removeTaskAC = (taskId: string, todolistId: string) => ({ type: 'REMOVE-TASK', taskId, todolistId } as const)\r\nexport const addTaskAC = (task: TaskType) => ({ type: 'ADD-TASK', task } as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) => ({\r\n    type: 'UPDATE-TASK',\r\n    model,\r\n    todolistId,\r\n    taskId\r\n} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({\r\n    type: 'SET-TASKS',\r\n    tasks,\r\n    todolistId\r\n} as const) */\r\n\r\n\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n/* type ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n    | ClearDataActionType */\r\ntype ThunkDispatch = Dispatch<SetAppStatusActionType | SetAppErrorActionType>\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@mui/icons-material';\r\nimport { Task } from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api'\r\nimport { FilterValuesType, TodolistDomainType } from '../todolists-reducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchTasksTC } from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({ demo = false, ...props }: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle} />\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete />\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'} />\r\n        <div>\r\n            {\r\n                tasksForTodolist && tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                    removeTask={props.removeTask}\r\n                    changeTaskTitle={props.changeTaskTitle}\r\n                    changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{ paddingTop: '10px' }}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                onClick={onAllClickHandler}\r\n                color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                onClick={onActiveClickHandler}\r\n                color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                onClick={onCompletedClickHandler}\r\n                color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport { addTaskTC, removeTaskTC, TasksStateType, updateTaskTC } from './tasks-reducer'\r\nimport { TaskStatuses } from '../../api/todolists-api'\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport { AddItemForm } from '../../components/AddItemForm/AddItemForm'\r\nimport { Todolist } from './Todolist/Todolist'\r\nimport { Navigate } from 'react-router-dom'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({ demo = false }) => {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (taskId: string, todolistId: string) {\r\n        const thunk = removeTaskTC({ taskId, todolistId })\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC({ title, todolistId })\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC({ taskId: id, domainModel: { status }, todolistId: todolistId })\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC({ taskId: id, domainModel: { title: newTitle }, todolistId: todolistId })\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({ id: todolistId, filter: value })\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (todolistId: string) {\r\n        const thunk = removeTodolistTC({todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC({id, title})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return < Navigate to={'login'} />\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{ padding: '20px' }}>\r\n            <AddItemForm addItem={addTodolist} />\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{ padding: '10px' }}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { setAppErrorAC } from '../../app/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC({ error: null }))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{ width: '100%' }}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import { tasksReducer } from '../features/TodolistsList/tasks-reducer';\r\nimport { todolistsReducer } from '../features/TodolistsList/todolists-reducer';\r\nimport { applyMiddleware, combineReducers, createStore } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { appReducer } from './app-reducer'\r\nimport { authReducer } from '../features/TodolistsList/Login/authReduce';\r\nimport { configureStore } from '@reduxjs/toolkit';\r\nimport { useDispatch } from 'react-redux';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\n// непосредственно создаём store\r\n//export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) =>\r\n        getDefaultMiddleware({\r\n            thunk: {\r\n                extraArgument: thunkMiddleware,\r\n            },\r\n        }),\r\n})\r\n\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\ntype AppDispatchType = typeof store.dispatch\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()","\r\nimport React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport { FormikHelpers, useFormik } from 'formik';\r\nimport { Omit, useSelector } from 'react-redux';\r\nimport { loginTC } from './authReduce';\r\nimport { LoginParamsType } from '../../../api/todolists-api';\r\nimport { AppRootStateType, useAppDispatch } from '../../../app/store';\r\nimport { Navigate } from 'react-router-dom';\r\n\r\ntype FormValuesType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useAppDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: Partial<Omit<LoginParamsType, 'captcha'>> = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Password is required!';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Must be 3 characters or more';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: async (values: FormValuesType, formikHelpers: FormikHelpers<FormValuesType>) => {\r\n            const action = await dispatch(loginTC(values));\r\n\r\n            if (loginTC.rejected.match(action)) {\r\n                if (action.payload?.fieldsErrors?.length) {\r\n                    const error = action.payload?.fieldsErrors[0];\r\n                    formikHelpers.setFieldError(error.field, error.error)\r\n                }\r\n            }\r\n            formik.resetForm();\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={'/'} />\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                            target={'_blank'}> here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {\r\n                            formik.touched.email && formik.errors.email && <div style={{ color: 'red' }}>\r\n                                {formik.errors.email}</div>\r\n                        }\r\n\r\n                        <TextField type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {\r\n                            formik.touched.password && formik.errors.password && <div style={{ color: 'red' }}>\r\n                                {formik.errors.password}</div>\r\n                        }\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                            />} />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </form>\r\n            </FormControl>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport './App.css'\r\nimport { TodolistsList } from '../features/TodolistsList/TodolistsList'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from './store'\r\nimport { initializeAppTC, RequestStatusType } from './app-reducer'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport { Menu } from '@mui/icons-material';\r\nimport { ErrorSnackbar } from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport { Login } from '../features/TodolistsList/Login/Login'\r\nimport { Navigate, Route, Routes } from 'react-router-dom'\r\nimport { CircularProgress } from '@mui/material'\r\nimport { logoutTC } from '../features/TodolistsList/Login/authReduce'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({ demo = false }: PropsType) {\r\n\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (!demo) {\r\n            dispatch(initializeAppTC())\r\n        }\r\n    }, [])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{ position: 'fixed', top: '30%', textAlign: 'center', width: '100%' }}>\r\n            <CircularProgress />\r\n        </div>\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar />\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Logout</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress />}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path=\"MYTODO/\" element={<TodolistsList demo={demo} />} />\r\n                    <Route path=\"MYTODO/login\" element={<Login />} />\r\n                    <Route path=\"MYTODO/404\" element={<h1 style={{ textAlign: 'center' }}> 404 page not found</h1>} />\r\n                    <Route path=\"MYTODO/*\" element={<Navigate to={'404'} />} />\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport App from './app/App';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './app/store';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <BrowserRouter>\r\n                <App />\r\n            </BrowserRouter>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}